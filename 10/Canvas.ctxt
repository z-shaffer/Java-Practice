#BlueJ class context
comment0.target=Canvas
comment0.text=\n\ Canvas\ is\ a\ class\ to\ allow\ for\ simple\ graphical\ drawing\ on\ a\ canvas.\n\ This\ is\ a\ modification\ of\ the\ general\ purpose\ Canvas,\ specially\ made\ for\n\ the\ BlueJ\ "shapes"\ example.\ \n\n\ @author\ Bruce\ Quig\n\ @author\ Michael\ Kolling\ (mik)\n\n\ @version\ 2008.03.30\n
comment1.params=title\ width\ height\ bgColor
comment1.target=Canvas(java.lang.String,\ int,\ int,\ java.awt.Color)
comment1.text=\n\ Create\ a\ Canvas.\n\ @param\ title\ \ \ \ title\ to\ appear\ in\ Canvas\ Frame\n\ @param\ width\ \ \ \ the\ desired\ width\ for\ the\ canvas\n\ @param\ height\ \ \ the\ desired\ height\ for\ the\ canvas\n\ @param\ bgColor\ the\ desired\ background\ color\ of\ the\ canvas\n
comment10.params=
comment10.target=void\ redraw()
comment10.text=\n\ Redraw\ all\ shapes\ currently\ on\ the\ Canvas.\n
comment11.params=
comment11.target=java.util.HashMap\ getShapes()
comment11.text=\n\ Return\ the\ list\ of\ shapes.\n\ @return\ Hashmap\ of\ all\ of\ the\ shapes\ attached\ to\ this\n\ canvas.\n
comment12.params=
comment12.target=java.util.ArrayList\ getSquares()
comment12.text=\n\ Return\ the\ list\ of\ shapes.\n\ @return\ Hashmap\ of\ all\ of\ the\ shapes\ attached\ to\ this\n\ canvas.\n
comment13.params=x
comment13.target=int\ countSquaresAtX(int)
comment13.text=\n\ Count\ the\ number\ of\ squares\ at\ a\ given\ x\ coordinate.\n\ @param\ x\ The\ x\ coordinate\ to\ check\ squares\ against.\n\ @return\ count\ Count\ of\ squares\ at\ the\ given\ x\ coordinate.\n
comment14.params=y
comment14.target=int\ countSquaresAtY(int)
comment14.text=\n\ Count\ the\ number\ of\ squares\ at\ a\ given\ y\ coordinate.\n\ @param\ y\ The\ y\ coordinate\ to\ check\ squares\ against.\n\ @return\ count\ Count\ of\ squares\ at\ the\ given\ y\ coordinate.\n
comment15.params=
comment15.target=void\ erase()
comment15.text=\n\ Erase\ the\ whole\ canvas.\ (Does\ not\ repaint.)\n
comment16.params=
comment16.target=void\ resetCanvas()
comment16.text=\n\ Reset\ canvas.\ \ Erase\ all\ shapes.\ \ Delete\ all\ shapes.\n\ Redraw\ axes.\n
comment17.params=color
comment17.target=int\ countShapesByColor(java.lang.String)
comment17.text=\n\ Count\ the\ number\ of\ shapes\ with\ the\ given\ color.\n\ \n\ @param\ color\ Count\ shapes\ with\ this\ color.\n\ \n\ @return\ Returns\ the\ number\ of\ shapes\ with\ the\ given\ color.\n
comment18.params=
comment18.target=int\ countOffscreenSquares()
comment18.text=\n\ Count\ the\ number\ of\ squares\ that\ are\ off\ the\ screen.\n\ \n\ @return\ Returns\ tne\ number\ of\ squares\ that\ have\ x\ or\ y\n\ positions\ outside\ the\ bounds\ of\ the\ window.\ \ That\ is\n\ x\ or\ y\ <\ 0\ or\ x\ or\ y\ >\ 299.\n
comment19.params=
comment19.target=java.util.ArrayList\ getCircles()
comment19.text=\n\ Get\ all\ circles\ that\ have\ been\ drawn.\n\ \n\ @return\ Returns\ an\ ArrayList\ of\ circle\ objects.\n
comment2.params=title\ width\ height\ bgColor\ noFrame
comment2.target=Canvas(java.lang.String,\ int,\ int,\ java.awt.Color,\ boolean)
comment2.text=\n\ Create\ a\ Canvas.\n\ @param\ title\ \ \ \ title\ to\ appear\ in\ Canvas\ Frame.\n\ @param\ width\ \ \ \ the\ desired\ width\ for\ the\ canvas.\n\ @param\ height\ \ \ the\ desired\ height\ for\ the\ canvas.\n\ @param\ bgColor\ the\ desired\ background\ color\ of\ the\ canvas.\n\ @param\ noFrame\ If\ this\ exists,\ make\ a\ no\ frame\ canvas.\n
comment20.params=
comment20.target=java.awt.image.BufferedImage\ getCanvasImage()
comment20.text=\n\ Accessor\ for\ getting\ the\ canvas\ image.\n\ @return\ Returns\ the\ image\ associated\ with\ this\n\ canvas.\n
comment3.params=
comment3.target=Canvas\ getCanvas()
comment3.text=\n\ Factory\ method\ to\ get\ the\ canvas\ singleton\ object.\n\ @return\ Return\ the\ current\ canvas.\ \ Create\ a\ new\ canvas\ if\ one\n\ does\ not\ currently\ exist.\n
comment4.params=visible
comment4.target=void\ setVisible(boolean)
comment4.text=\n\ Set\ the\ canvas\ visibility\ and\ brings\ canvas\ to\ the\ front\ of\ screen\n\ when\ made\ visible.\ This\ method\ can\ also\ be\ used\ to\ bring\ an\ already\n\ visible\ canvas\ to\ the\ front\ of\ other\ windows.\n\ @param\ visible\ \ boolean\ value\ representing\ the\ desired\ visibility\ of\n\ the\ canvas\ (true\ or\ false)\ \n
comment5.params=graphic
comment5.target=void\ drawAxes(java.awt.Graphics2D)
comment5.text=\n\ Draw\ the\ axes\ templates\ on\ the\ screen.\n\ \n\ @param\ graphic\ The\ graphic\ object\ which\ contains\n\ the\ canvas\ image\ data.\n
comment6.params=referenceObject\ color\ shape
comment6.target=void\ draw(java.lang.Object,\ java.lang.String,\ java.awt.Shape)
comment6.text=\n\ Draw\ a\ given\ shape\ onto\ the\ canvas.\n\ @param\ \ referenceObject\ \ an\ object\ to\ define\ identity\ for\ this\ shape\n\ @param\ \ color\ \ \ \ \ \ \ \ \ \ \ \ the\ color\ of\ the\ shape\n\ @param\ \ shape\ \ \ \ \ \ \ \ \ \ \ \ the\ shape\ object\ to\ be\ drawn\ on\ the\ canvas\n
comment7.params=referenceObject
comment7.target=void\ erase(java.lang.Object)
comment7.text=\n\ Erase\ a\ given\ shape's\ from\ the\ screen.\n\ @param\ \ referenceObject\ \ the\ shape\ object\ to\ be\ erased\ \n
comment8.params=colorString
comment8.target=void\ setForegroundColor(java.lang.String)
comment8.text=\n\ Set\ the\ foreground\ color\ of\ the\ Canvas.\n\ @param\ \ colorString\ \ \ the\ new\ color\ for\ the\ foreground\ of\ the\ Canvas\ \n
comment9.params=milliseconds
comment9.target=void\ wait(int)
comment9.text=\n\ Wait\ for\ a\ specified\ number\ of\ milliseconds\ before\ finishing.\n\ This\ provides\ an\ easy\ way\ to\ specify\ a\ small\ delay\ which\ can\ be\n\ used\ when\ producing\ animations.\n\ @param\ \ milliseconds\ \ The\ number\ of\ seconds\ to\ sleep.\n
numComments=21
